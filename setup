q = []

q.push("system = contract(MatryxSystem.address, MatryxSystem)")
q.push("system.createVersion(1)")
q.push("system.setVersion(1)")

q.push("system.setContract(1, stb('MatryxPlatform'), MatryxPlatform.address)")
q.push("system.setContractType(MatryxPlatform.address, 1)")

q.push("system.setContract(1, stb('MatryxUser'), MatryxUser.address)")
q.push("system.setContractType(MatryxUser.address, 2)")

q.push("system.setContract(1, stb('MatryxCommit'), MatryxCommit.address)")
q.push("system.setContractType(MatryxCommit.address, 3)")

q.push("system.setContract(1, stb('LibPlatform'), LibPlatform.address)")
q.push("system.setContract(1, stb('LibUser'), LibUser.address)")
q.push("system.setContract(1, stb('LibCommit'), LibCommit.address)")
q.push("system.setContract(1, stb('LibTournament'), LibTournament.address)")
q.push("system.setContract(1, stb('LibRound'), LibRound.address)")

q.push("system.setLibraryName(0, stb('LibPlatform'))")
q.push("system.setLibraryName(1, stb('LibPlatform'))")
q.push("system.setLibraryName(2, stb('LibUser'))")
q.push("system.setLibraryName(3, stb('LibCommit'))")
q.push("system.setLibraryName(4, stb('LibTournament'))")
q.push("system.setLibraryName(5, stb('LibRound'))")

q.push("system.addContractMethods(1, stb('LibCommit'), ['0x1e38bb28'], ['0xb5215f33'], ['0x00', [0,3], [4]], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibCommit'), ['0xd7ba4e33'], ['0xe45fdba0'], ['0x00', [0,3], []], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibCommit'), ['0x8784ea96','0xde838917','0x3206a91a','0x63b8c396','0x091977df','0x21cd3cae','0xbe74b5d5'], ['0x2d548a40','0x02546e6a','0x6ffec9c2','0x178a1915','0x9a1d5544','0x19107167','0x4948cc67'], ['0x00', [3], []], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibCommit'), ['0xdc2ddcae','0xcf1f2d14','0xfb02cfa8','0x02750201'], ['0x6ed34c7e','0xc1291fff','0xb009f19d','0xad737b54'], ['0x00', [3], [0]], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibCommit'), ['0x064699d8'], ['0x24e5114d'], ['0x00', [3], [10]], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibCommit'), ['0x0b80ee36'], ['0x7125f211'], ['0x00', [3], [3]], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibPlatform'), ['0x7bdec98c','0x5fd8c710','0x91e8cc3f','0xd543ce37'], ['0xe91bd88b','0x1a55132c','0x5a88223c','0x3a1f7ffd'], ['0x00', [0,3], []], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibPlatform'), ['0xbc8b0e5a','0xe10f1b06','0xb5cb15f7','0x9b96eece','0x00ce8e3e','0x7a348ab3','0x12b58349','0x8c1fc0bb','0xf7f20cb3','0x078c51f0'], ['0x3c0e0f55','0xcda2084d','0xcaa6f75a','0xcd32526d','0x7cc0c79b','0x2ace6c70','0x7f279bd0','0x1886dbb4','0x275111eb','0x54b73af5'], ['0x00', [3], []], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibRound'), ['0xe76c293e','0x9f05a36d','0xa73a4aaf','0xf49bff7b','0x12065fe0','0xc5292c67','0x54f6aa20','0x0d8e6e2c','0x9999d2ae','0xc3ae985f','0x1865c57d','0x756dd3a4','0x3bc5de30'], ['0x19820bce','0x6ff732f9','0xc73d4968','0x7cc0c3b9','0x8a1250dd','0xaf8c54e5','0x40721539','0x15bd7b01','0xed7c9de9','0x15c8e3bc','0xb5413d67','0x348785e9','0x412559e1'], ['0x00', [3], []], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibTournament'), ['0xe1226bb1','0x39900857','0x542fe6c2','0x6c87da28','0xa84fa137','0xbe999705','0xf0ac5afd','0xe9fad8ee','0xe97dcb62','0xb79550be'], ['0xca0ba8b4','0xbc04601c','0xf7230424','0x6892107c','0x86f7b75f','0x6e6661aa','0xb4835ebe','0x22fb9c1e','0x19fe07db','0x77f3fbdc'], ['0x00', [0,3], []], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibTournament'), ['0x9e4ce509'], ['0x8fd2c899'], ['0x00', [0,3], [0]], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibTournament'), ['0x790b6209','0xa32bf597','0x893d20e8','0xb1474678','0x1865c57d','0x9999d2ae','0xfbbf93a0','0x6984d070','0xe586a4f0','0x3c3ccc44','0xf49bff7b','0xff3c1a8f','0x245edf06','0xdca0f3ef','0x52c01fab','0x12065fe0','0x0d8e6e2c'], ['0x6f5de052','0x82b45813','0xc40c4371','0xa6b7ee0e','0xb5413d67','0xed7c9de9','0xba90b857','0x6852c33e','0x10206095','0xfab2d488','0x7cc0c3b9','0xa35d9e78','0x61f08a3d','0x8a57f372','0xb419874a','0x8a1250dd','0x15bd7b01'], ['0x00', [3], []], { gasLimit: 3e6 })")
q.push("system.addContractMethods(1, stb('LibUser'), ['0x38266b22','0x83ec507e','0x02c81f82','0xb1c7a20f','0x726ec8f0','0xf343eb96','0xbdbd3583'], ['0xc7ef5c16','0x923c77e7','0xd0509905','0x8f3906ed','0x78f78cac','0x374c9653','0x80a762ca'], ['0x00', [3], []], { gasLimit: 3e6 })")

q.push("c = contract(MatryxCommit.address, IMatryxCommit)")
q.push("p = contract(MatryxPlatform.address, IMatryxPlatform)")

q.push("token = contract(network.tokenAddress, MatryxToken)")
q.push("token.setReleaseAgent(network.accounts[0])")
q.push("token.releaseTokenTransfer()")
q.push("token.mint(network.accounts[0], toWei(1e4))")
q.push("token.mint(network.accounts[1], toWei(1e4))")
q.push("token.mint(network.accounts[2], toWei(1e4))")
q.push("token.mint(network.accounts[3], toWei(1e4))")
q.push("token.mint(network.accounts[4], toWei(1e4))")

;(async () => { for (let cmd of q) try { await eval(cmd) } catch (err) { } })()
