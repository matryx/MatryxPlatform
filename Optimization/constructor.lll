;;; ---------------------------------------------------------------------------
;;; An LLL constructor demonstration.

(seq

  (include "macros.lll")

  ;; --------------------------------------------------------------------------
  ;; Copy any constructor parameters to memory.
  ;;
  ;; The constructor parameters are appended to the contract bytecode by
  ;; whatever code is deploying the contract (usually 'web3'). The type and
  ;; number of parameters is specified in the ABI definition for the
  ;; constructor, e.g.:
  ;;
  ;;   {
  ;;       "inputs": [
  ;;           {
  ;;               "name": "parameter",
  ;;               "type": "uint256"
  ;;           }
  ;;       ],
  ;;       "type": "constructor"
  ;;   }
  ;;
  ;; The contract bytecode includes the init code as well as the contract code
  ;; we wish to deploy. The size of the contract bytecode minus the appended
  ;; parameters is available as '(bytecodesize)' This value points to the start
  ;; of the appended constructor parameters.
  ;;
  ;; In a real-world contract we could have multiple constructor parameters of
  ;; varying sizes. From the ABI we can determine how much memory we need to
  ;; set aside for the 'codecopy'. In this case there's only one parameter of
  ;; type 'uint256', so we need to set aside 32 bytes of memory.

  (codecopy temp-data (bytecodesize) 32)

  ;; --------------------------------------------------------------------------
  ;; Move the constructor parameters to storage.
  ;;
  ;; Once the data has been copied to memory we can move each parameter to
  ;; permanent storage so that it's available to the running contract. This
  ;; second step is necessary because 'codecopy' can only copy to memory; it
  ;; can't go directly to storage.
  ;;
  ;; Since the incoming data is ABI-encoded, there's a chance that some
  ;; decoding will be necessary at this point. Please refer to this
  ;; documentation for the format of constructor parameter encoding:
  ;;
  ;;   https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
  ;;
  ;; In the case of this toy contract we only have a single uint256 parameter
  ;; which doesn't require any decoding, so we can simply copy it to storage.

  (sstore parameter @temp-data)

  ;; --------------------------------------------------------------------------
  ;; Compile the contract and return its location and length to the caller.
  ;;
  ;; The code within the 'lll' operator's parentheses is the contract that will
  ;; end up running on the blockchain. This is where the contract's functions
  ;; reside. The 'lll' operator will return the length of the compiled code.
  ;; So it actually ends up as: '(return code-body code-length)'.

  (return code-body (lll
                      (seq

                        ;; ----------------------------------------------------------------------
                        ;; Return the single constructor parameter.
                        ;;
                        ;; This function retrieves its constructor parameter from storage where
                        ;; we placed it on deployment.

                        (function get-parameter
                                  (seq
                                    (mstore temp-data @@parameter)
                                    (return temp-data 32)))

                        ;; ----------------------------------------------------------------------
                        ;; Fallback function: Cause an EVM panic.
                        ;;
                        ;; No contract functions matched the ID provided. The convention in this
                        ;; case is to do the equivalent of Solidity's 'throw' instruction. This
                        ;; is accomplished here by causing an EVM panic.

                        (panic))

                      code-body))

  )