+=========================================================================+
|                               Testing                                   |
+=========================================================================+

// Scenario I: Missing reference flagged then added then removed then flagged then added then approved.

// Set up the platform, create three peers, set up MatryxToken, mint some tokens for each owner of a peer, create a tournament.
platform = web3.eth.contract(MatryxPlatform.abi).at(MatryxPlatform.address)
web3.eth.defaultAccount = web3.eth.accounts[0]
platform.createPeer.sendTransaction({gas: 4000000});
platform.createPeer.sendTransaction({gas: 4000000, from: web3.eth.accounts[1]});
platform.createPeer.sendTransaction({gas: 4000000, from: web3.eth.accounts[2]});
platform.createPeer.sendTransaction({gas: 4000000, from: web3.eth.accounts[3]});
token = web3.eth.contract(MatryxToken.abi).at("0x89c81164a847fae12841c7d2371864c7656f91c9")
token.setReleaseAgent(web3.eth.accounts[0])
token.releaseTokenTransfer.sendTransaction({gas: 1000000})
token.mint(web3.eth.accounts[0], 10000)
token.mint(web3.eth.accounts[1], 2)
token.mint(web3.eth.accounts[2], 2)
token.mint(web3.eth.accounts[3], 2)
token.approve(MatryxPlatform.address, 100)
platform.createTournament.sendTransaction("math", "create a shell", "ipfs hash", 100, 2, 100000, {gas: 4000000})

// Create a round.
tournament = web3.eth.contract(MatryxTournament.abi).at(platform.getTournamentAtIndex.call(0))
tournament.setSubmissionGratitude(5*10**17, {gas: 1000000})
tournament.createRound(10, {gas: 4000000})

// Start the round and create some submissions!
// (Modify the first parameter '30' to the desired number of seconds to keep the round open)
tournament.startRound(30, 120000, {gas: 1500000});
token.approve(tournament.address, 2, {from: web3.eth.accounts[1]})
token.approve(tournament.address, 2, {from: web3.eth.accounts[2]})
token.approve(tournament.address, 2, {from: web3.eth.accounts[3]})
platform.enterTournament(tournament.address, {gas: 1500000, from: web3.eth.accounts[1]})
platform.enterTournament(tournament.address, {gas: 1500000, from: web3.eth.accounts[2]})
platform.enterTournament(tournament.address, {gas: 1500000, from: web3.eth.accounts[3]});
tournament.createSubmission("submissionOne", web3.eth.accounts[1], "external address", [], [], true, {gas: 5000000, from: web3.eth.accounts[1]});
tournament.createSubmission("submissionTwo", web3.eth.accounts[2], "external address", [], [], true, {gas: 5000000, from: web3.eth.accounts[2]});
tournament.createSubmission("submissionThr", web3.eth.accounts[3], "external address", [], [], true, {gas: 5000000, from: web3.eth.accounts[3]});

// Then the round has ended, run these to attach to the round and submissions.
round = web3.eth.contract(MatryxRound.abi).at(tournament.currentRound()[1]);
tournament.chooseWinner(round.getSubmissions()[0]);
addressSubmissionOne = round.getSubmissions()[0];
addressSubmissionTwo = round.getSubmissions()[1];
addressSubmissionThr = round.getSubmissions()[2];
submissionOne = web3.eth.contract(MatryxSubmission.abi).at(addressSubmissionOne);
submissionTwo = web3.eth.contract(MatryxSubmission.abi).at(addressSubmissionTwo);
submissionThr = web3.eth.contract(MatryxSubmission.abi).at(addressSubmissionThr);

// Add some references to the submissions.
submissionOne.addReference(addressSubmissionTwo, {from: web3.eth.accounts[1], gas: 2000000});
submissionTwo.addReference(addressSubmissionOne, {from: web3.eth.accounts[2], gas: 2000000});
submissionThr.addReference(addressSubmissionOne, {from: web3.eth.accounts[3], gas: 2000000});

// Check to see that those references were properly added.
submissionOne.getReferences.call({from: web3.eth.accounts[1]});
submissionTwo.getReferences.call({from: web3.eth.accounts[2]});
submissionThr.getReferences.call({from: web3.eth.accounts[3]});

// Attach to some peers.
peerOne = web3.eth.contract(MatryxPeer.abi).at(platform.peerAddress.call(web3.eth.accounts[1]))
peerTwo = web3.eth.contract(MatryxPeer.abi).at(platform.peerAddress.call(web3.eth.accounts[2]))
peerThr = web3.eth.contract(MatryxPeer.abi).at(platform.peerAddress.call(web3.eth.accounts[3]));

// Check peers' reputations and submissions' trust values
peerOne.getReputation.call()
// This value should be zero because no one has voiced their opinion on our submission.
submissionOne.totalPossibleTrust()
// This value should also be zero ebcause no one has approved our submission.
submissionOne.approvalTrust()

// Approve the references to submissionTwo on submissionOne (from peer two)
// This should affect all three values obtained above.
peerTwo.approveReference(addressSubmissionOne, addressSubmissionTwo, {from: web3.eth.accounts[2], gas: 1000000});

// Check peerOne's reputation again. It should have increased.
peerOne.getReputation();
// Check the total trust possible for this submission. It should be equal to peerTwo's reptutation now that peerTwo has approved the reference to their submission.
submissionOne.totalPossibleTrust();
// Check our approval trust. This should also be equal to peerTwo's reputation. It would be a fraction of peerTwo's reputation if we'd included multiple references to peerTwo's work but peerTwo had only approved some of them.
submissionOne.approvalTrust();

// As we can see, the previous two values match peerTwo's reputation.
peerTwo.getReputation();

// We will now approve submissionTwo's reference to submissionOne as peerOne. This should increase peerTwo's reputation and affect the trust values on submissionTwo.
peerOne.approveReference(addressSubmissionTwo, addressSubmissionOne, {from: web3.eth.accounts[1], gas: 1000000});

// peerTwo's reptuation is higher now!
peerTwo.getReputation.call()
// submissionTwo's total possible trust is now equal to the approved-submission-proportion-weighted sum of reputations of its references' authors (aka peerOne's reputation).
submissionTwo.totalPossibleTrust()
// Check submissionTwo's approval trust as well, which should be at its maximum value just like submissionOne.

// Peer three notices that submissionOne has a missing reference to its work and flags it.
peerThr.flagMissingReference(addressSubmissionOne, addressSubmissionThr, {from: web3.eth.accounts[3], gas: 2000000});

// Check the total possible trust available to submissionOne. It has now increased to include peerThree's reputation.
submissionOne.totalPossibleTrust()
// Check the approval trust given to submissionOne. It has remained the same.
submissionOne.approvalTrust()

// Check that the reference to submission three is flagged (debug method)
submissionOne.addressIsFlagged(addressSubmissionThr);

// Check (as peer three) how many references of ours are missing on submissionOne. This method returns a tuple where the first element is the number of missing references and the second is the number of total references (excluding missing references).
peerThr.getMissingReferenceCount.call(submissionOne.address, {from: web3.eth.accounts[3]});

// Add the missing reference to submissionOne
submissionOne.addReference(addressSubmissionThr, {from: web3.eth.accounts[1], gas: 3000000});

// peerThree's missing reference flag has removed because submissionOne added the reference that was missing. submisionOne's total possible trust decreased because peerThree is no longer influencing the trust on submissionOne. submissionOne's trust still encompasses peerTwo's reputation (at the time that they approved. This is how this implementation is 'lazy').
submissionOne.totalPossibleTrust()
// approval trust remains the same.
submissionOne.approvalTrust()

// Check (as peer three) how many references of ours are missing on submissionOne. Missing references should be 0, total references should now be one.
peerThr.getMissingReferenceCount.call(submissionOne.address, {from: web3.eth.accounts[3]});

// This next call should revert: the reference to submissionThree was just added.
peerThr.flagMissingReference(addressSubmissionOne, addressSubmissionThr, {from: web3.eth.accounts[3], gas: 2000000}); // Should revert.

// Remove the reference to submissionThree on submissionOne.
submissionOne.removeReference(addressSubmissionThr, {from: web3.eth.accounts[1], gas: 3000000});

// peerThr no longer has references to their work anywhere.
peerThr.getMissingReferenceCount.call(submissionOne.address, {from: web3.eth.accounts[3]});

// peerThr flags the missing reference in submissionOne again.
peerThr.flagMissingReference(addressSubmissionOne, addressSubmissionThr, {from: web3.eth.accounts[3], gas: 2000000}); // Should not revert.

// Missing reference visible again.
peerThr.getMissingReferenceCount.call(submissionOne.address, {from: web3.eth.accounts[3]});
// Total possible trust for submissionOne increased again.
submissionOne.totalPossibleTrust()

// Add back the reference to submissionThree. This should increase submissionOne.approvalTrust() to its maximum possible value (submissionOne.totalPossibleTrust())
submissionOne.addReference(addressSubmissionThr, {from: web3.eth.accounts[1], gas: 3000000});

// Approve the reference on to submissionThree in submissionOne.
peerThr.approveReference(addressSubmissionOne, addressSubmissionThr, {from: web3.eth.accounts[3], gas: 1000000})
// Approval trust on submissionOne now encompasses peerThree's reputation.
submissionOne.approvalTrust()

