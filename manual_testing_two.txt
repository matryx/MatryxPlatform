+=========================================================================+
|                               Testing                                   |
+=========================================================================+

// Scenario II: Approved reference dropped and then disapproved.

// Run these commands first
platform = web3.eth.contract(MatryxPlatform.abi).at(MatryxPlatform.address)
web3.eth.defaultAccount = web3.eth.accounts[0]
platform.createPeer.sendTransaction({gas: 3000000});
platform.createPeer.sendTransaction({gas: 3000000, from: web3.eth.accounts[1]});
platform.createPeer.sendTransaction({gas: 3000000, from: web3.eth.accounts[2]});
platform.createPeer.sendTransaction({gas: 3000000, from: web3.eth.accounts[3]});
token = web3.eth.contract(MatryxToken.abi).at("0x89c81164a847fae12841c7d2371864c7656f91c9")
token.setReleaseAgent(web3.eth.accounts[0])
token.releaseTokenTransfer.sendTransaction({gas: 1000000})
token.mint(web3.eth.accounts[0], 10000)
token.mint(web3.eth.accounts[1], 2)
token.mint(web3.eth.accounts[2], 2)
token.mint(web3.eth.accounts[3], 2)
token.approve(MatryxPlatform.address, 100)
platform.createTournament.sendTransaction("math", "create a shell", "ipfs hash", 100, 2, 100000, {gas: 4000000})


// Then these.
tournament = web3.eth.contract(MatryxTournament.abi).at(platform.getTournamentAtIndex.call(0))
tournament.setSubmissionGratitude(5*10**17, {gas: 1000000})
tournament.createRound(10, {gas: 4000000})

// Then these.
tournament.startRound(10, 120000, {gas: 1500000});
token.approve(tournament.address, 2, {from: web3.eth.accounts[1]});
token.approve(tournament.address, 2, {from: web3.eth.accounts[2]});
token.approve(tournament.address, 2, {from: web3.eth.accounts[3]});
platform.enterTournament(tournament.address, {gas: 1500000, from: web3.eth.accounts[1]});
platform.enterTournament(tournament.address, {gas: 1500000, from: web3.eth.accounts[2]});
platform.enterTournament(tournament.address, {gas: 1500000, from: web3.eth.accounts[3]});
tournament.createSubmission("submissionOne", web3.eth.accounts[1], "external address", [], [], true, {gas: 5000000, from: web3.eth.accounts[1]});
tournament.createSubmission("submissionTwo", web3.eth.accounts[2], "external address", [], [], true, {gas: 5000000, from: web3.eth.accounts[2]});
tournament.createSubmission("submissionThr", web3.eth.accounts[3], "external address", [], [], true, {gas: 5000000, from: web3.eth.accounts[3]});

// Then after about five seconds, run these.
round = web3.eth.contract(MatryxRound.abi).at(tournament.currentRound()[1]);
tournament.chooseWinner(round.getSubmissions()[0]);
addressSubmissionOne = round.getSubmissions()[0];
addressSubmissionTwo = round.getSubmissions()[1];
addressSubmissionThr = round.getSubmissions()[2];
submissionOne = web3.eth.contract(MatryxSubmission.abi).at(addressSubmissionOne)
submissionTwo = web3.eth.contract(MatryxSubmission.abi).at(addressSubmissionTwo)
submissionThr = web3.eth.contract(MatryxSubmission.abi).at(addressSubmissionThr)

// Run these to add references to the first submission.
submissionOne.addReference(addressSubmissionTwo, {from: web3.eth.accounts[1], gas: 2000000});
submissionOne.addReference(addressSubmissionThr, {from: web3.eth.accounts[1], gas: 2000000});

// Check to make sure those references exist now.
submissionOne.getReferences.call({from: web3.eth.accounts[1]})

// Attach to some peers.
peerOne = web3.eth.contract(MatryxPeer.abi).at(platform.peerAddress.call(web3.eth.accounts[1]))
peerTwo = web3.eth.contract(MatryxPeer.abi).at(platform.peerAddress.call(web3.eth.accounts[2]))
peerThr = web3.eth.contract(MatryxPeer.abi).at(platform.peerAddress.call(web3.eth.accounts[3]));

// Approve (as peer two and peer three) the references that submissionOne added a few commands ago.
peerTwo.approveReference(addressSubmissionOne, addressSubmissionTwo, {from: web3.eth.accounts[2], gas: 1000000});
peerThr.approveReference(addressSubmissionOne, addressSubmissionThr, {from: web3.eth.accounts[3], gas: 1000000});

// Check how many of your references are missing from submissionOne (as peer three).
peerThr.getMissingReferenceCount.call(submissionOne.address, {from: web3.eth.accounts[3]}); // Should be 0.

// This should revert. The reference to peerThree's is not missing; it cannot be flagged as such.
peerThr.flagMissingReference(addressSubmissionOne, addressSubmissionThr, {from: web3.eth.accounts[3], gas: 2000000});

// Remove the reference to submissionThree from submissionOne.
submissionOne.removeReference(addressSubmissionThr, {from: web3.eth.accounts[1], gas: 3000000});

// It should now be possible to flag the reference to submissionThree as missing on submissionOne
peerThr.flagMissingReference(addressSubmissionOne, addressSubmissionThr, {from: web3.eth.accounts[3], gas: 2000000}); // Should not revert.