q = []

q.push("system = contract(MatryxSystem.address, MatryxSystem)")
q.push("system.createVersion(1)")
q.push("system.setVersion(1)")

q.push("system.setContract(1, stringToBytes('MatryxPlatform'), MatryxPlatform.address)")
q.push("system.setContract(1, stringToBytes('LibUtils'), LibUtils.address)")
q.push("system.setContract(1, stringToBytes('LibPlatform'), LibPlatform.address)")
q.push("system.setContract(1, stringToBytes('LibTournament'), LibTournament.address)")
q.push("system.setContract(1, stringToBytes('LibRound'), LibRound.address)")
q.push("system.setContract(1, stringToBytes('LibSubmission'), LibSubmission.address)")

$COMMANDS

q.push("p = contract(MatryxPlatform.address, IMatryxPlatform)")

q.push("token = contract(network.tokenAddress, MatryxToken)")
q.push("token.setReleaseAgent(network.accounts[0])")
q.push("token.releaseTokenTransfer()")
q.push("token.mint(network.accounts[0], toWei(1e4))")
q.push("token.mint(network.accounts[1], toWei(1e4))")
q.push("token.mint(network.accounts[2], toWei(1e4))")
q.push("token.mint(network.accounts[3], toWei(1e4))")
q.push("token.mint(network.accounts[4], toWei(1e4))")

;(async () => { for (let cmd of q) try { await eval(cmd) } catch (err) {} })()
